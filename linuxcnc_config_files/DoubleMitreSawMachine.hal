# core HAL config file for simulation

# first load all the RT modules that will be needed
# kinematics
loadrt [KINS]KINEMATICS
#autoconverted  trivkins
# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS unlock_joints_mask=0x01 

loadrt smc                  names=j0.smc
loadrt and2                 count=1
loadrt not                  count=1
loadrt sim_axis_hardware    names=sim-hardware
loadrt cut_state_machine    list_buffer_size=1000
loadrt streamer             depth=100 cfg=FFFFFUU

setp j0.smc.min    [JOINT_0]AXIS_MIN_LIMIT
setp j0.smc.max    [JOINT_0]AXIS_MAX_LIMIT
setp j0.smc.maxv   [JOINT_0]MAX_VELOCITY
setp j0.smc.maxa   [JOINT_0]MAX_ACCELERATION

setp sim-hardware.Xmaxsw-upper  1000
setp sim-hardware.Xmaxsw-lower  [JOINT_0]MAX_LIMIT
setp sim-hardware.Xminsw-upper  [JOINT_0]MIN_LIMIT
setp sim-hardware.Xminsw-lower  -1000
setp sim-hardware.Xhomesw-pos   [JOINT_0]HOME_OFFSET
setp sim-hardware.Xhomesw-hyst  0.6


setp cut_sm.min-limit [JOINT_0]AXIS_MIN_LIMIT
setp cut_sm.max-limit [JOINT_0]AXIS_MAX_LIMIT
setp cut_sm.ferror    [JOINT_0]FERROR
setp cut_sm.angle-head-type-actuator [MACHINE_FEATURES]ANGLE_HEAD_TYPE_ACTUATOR
setp cut_sm.min-cut-top-position     [MACHINE_FEATURES]MIN_CUT_TOP_POSITION

setp cut_sm.clamps-btn-both 0
setp cut_sm.clamps-btn-in-edge 0
setp cut_sm.clamps-btn-out-width-pulses 1

setp cut_sm.busy-hand-btns-both 0
setp cut_sm.busy-hand-btns-in-edge 0
setp cut_sm.busy-hand-btns-out-width-pulses 1

#setp cut_sm.cut-list-max-size 1000

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf j0.smc servo-thread
addf sim-hardware.update servo-thread
addf cut_sm.update-cut-sm servo-thread
addf cut_sm.edges-detection-update servo-thread
#addf cut_sm.add-cut-to-list servo-thread
#addf cut_sm.clear-cut-list servo-thread
addf cut_sm.print-list servo-thread
addf cut_sm.update-cut-list servo-thread
addf and2.0 servo-thread
addf not.0 servo-thread
addf streamer.0 servo-thread

# create HAL signals for position commands from motion module
# loop position commands back to motion module feedback

net  j1_pos                 joint.0.motor-pos-cmd   =>  joint.0.motor-pos-fb sim-hardware.Xcurrent-pos  
net  j1_in                  cut_sm.move-to-length   =>  j0.smc.in
net  j1_out                 j0.smc.out              =>  joint.0.posthome-cmd
net  j1_en_homed            joint.0.homed           =>  and2.0.in0 
net  j1_en_feed_inhibit     cut_sm.feed-inhibit     =>  and2.0.in1
net  j1_en                  and2.0.out              =>  j0.smc.enable

net stop_move               =>  cut_sm.stop-move

net clamps_btn => cut_sm.clamps-button

net j0home  joint.0.home-sw-in  => sim-hardware.Xhomesw-out
net j0homing  joint.0.homing    => sim-hardware.Xhoming cut_sm.homing

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in cut_sm.estop

